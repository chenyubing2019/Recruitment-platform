### imageio简介

       IMAIO是一个Python库，它提供了一个简单的接口来读取和写入大量的图像数据，包括动画图像、体积数据和科学格式。它是跨平台的，运行在Python 2 .x和3。x上，并且易于安装。

 imageio.imread()    从指定的文件读取图像。返回一个NUMPY数组，该数组带有元数据的元属性。注意，图像数据按原样返回，并且可能不总是具有uTI8的dType（因此可能不同于例如PIL返回）。



### PIL简介

​	PIL是Python平台事实上的图像处理标准库，支持多种格式，并提供强大的图形与图像处理功能。目前PIL支持的版本为python 2x，并不支持python3，因此我们用pillow代替

### 第三方库安装

pip install Pillow     **Windows**安装PIL

pip install imageio  **windows**安装imageio

python3 setup.py install   **ubuntu**安装imagesio库

### 图像合成

~~~python
import imageio
import glob
import re
def create_gif(image_list, gif_name):
    frames = []
    for image_name in image_list:
        frames.append(imageio.imread(image_name))
        # 将它们作为帧保存到GIF中
    imageio.mimsave(gif_name, frames, 'GIF', duration=0.8)
    return
def find_all_png():
    png_filenames = glob.glob(r"C:\Users\Administrator\Desktop\test\*.png")
    buf = []
    for png_file in png_filenames:
        buf.append(png_file)
    return buf
if __name__ == '__main__':
    buff = find_all_png()
    create_gif(buff, 'created_gif.gif')
~~~



### 图像拆分

~~~python
from PIL import Image
import os
gifFileName = 'test.gif'
#使用Image模块的open()方法打开gif动态图像时，默认是第一帧
im = Image.open(gifFileName)
pngDir = gifFileName[:-4]
#创建存放每帧图片的文件夹
os.mkdir(pngDir)
try:
  while True:
    #保存当前帧图片
    current = im.tell()
    im.save(pngDir+'/'+str(current)+'.png')
    #获取下一帧图片
    im.seek(current+1)
except EOFError:
    pass
~~~

